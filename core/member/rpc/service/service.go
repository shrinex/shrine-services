// Code generated by goctl. DO NOT EDIT.
// Source: main.proto

package service

import (
	"context"

	"core/member/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddUserInput     = pb.AddUserInput
	AddUserOutput    = pb.AddUserOutput
	EditUserInput    = pb.EditUserInput
	EditUserOutput   = pb.EditUserOutput
	GetUserInput     = pb.GetUserInput
	GetUserOutput    = pb.GetUserOutput
	PageUsersInput   = pb.PageUsersInput
	PageUsersOutput  = pb.PageUsersOutput
	RemoveUserInput  = pb.RemoveUserInput
	RemoveUserOutput = pb.RemoveUserOutput
	User             = pb.User
	UserExistsInput  = pb.UserExistsInput
	UserExistsOutput = pb.UserExistsOutput

	Service interface {
		// AddUser 添加用户
		AddUser(ctx context.Context, in *AddUserInput, opts ...grpc.CallOption) (*AddUserOutput, error)
		// RemoveUser 删除用户
		RemoveUser(ctx context.Context, in *RemoveUserInput, opts ...grpc.CallOption) (*RemoveUserOutput, error)
		// EditUser 编辑用户信息
		EditUser(ctx context.Context, in *EditUserInput, opts ...grpc.CallOption) (*EditUserOutput, error)
		// GetUser 获取用户信息
		GetUser(ctx context.Context, in *GetUserInput, opts ...grpc.CallOption) (*GetUserOutput, error)
		// PageUsers 分页获取用户列表
		PageUsers(ctx context.Context, in *PageUsersInput, opts ...grpc.CallOption) (*PageUsersOutput, error)
		// UserExists 判断用户是否已存在
		UserExists(ctx context.Context, in *UserExistsInput, opts ...grpc.CallOption) (*UserExistsOutput, error)
	}

	defaultService struct {
		cli zrpc.Client
	}
)

func NewService(cli zrpc.Client) Service {
	return &defaultService{
		cli: cli,
	}
}

// AddUser 添加用户
func (m *defaultService) AddUser(ctx context.Context, in *AddUserInput, opts ...grpc.CallOption) (*AddUserOutput, error) {
	client := pb.NewServiceClient(m.cli.Conn())
	return client.AddUser(ctx, in, opts...)
}

// RemoveUser 删除用户
func (m *defaultService) RemoveUser(ctx context.Context, in *RemoveUserInput, opts ...grpc.CallOption) (*RemoveUserOutput, error) {
	client := pb.NewServiceClient(m.cli.Conn())
	return client.RemoveUser(ctx, in, opts...)
}

// EditUser 编辑用户信息
func (m *defaultService) EditUser(ctx context.Context, in *EditUserInput, opts ...grpc.CallOption) (*EditUserOutput, error) {
	client := pb.NewServiceClient(m.cli.Conn())
	return client.EditUser(ctx, in, opts...)
}

// GetUser 获取用户信息
func (m *defaultService) GetUser(ctx context.Context, in *GetUserInput, opts ...grpc.CallOption) (*GetUserOutput, error) {
	client := pb.NewServiceClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

// PageUsers 分页获取用户列表
func (m *defaultService) PageUsers(ctx context.Context, in *PageUsersInput, opts ...grpc.CallOption) (*PageUsersOutput, error) {
	client := pb.NewServiceClient(m.cli.Conn())
	return client.PageUsers(ctx, in, opts...)
}

// UserExists 判断用户是否已存在
func (m *defaultService) UserExists(ctx context.Context, in *UserExistsInput, opts ...grpc.CallOption) (*UserExistsOutput, error) {
	client := pb.NewServiceClient(m.cli.Conn())
	return client.UserExists(ctx, in, opts...)
}
